import { generate } from './generate.js'
import { bundle } from './bundle.js'

/**
 * Given an OpenAPI definition, compile into an AJV validation module string, and a schema tree
 * which can be used to resolve $ref links.
 *
 * @param {Object} definition - The OpenAPI definition object.
 * @return {Promise<{ code: String, tree: String }>} - The returned compiled code and compiled schema tree code.
 */
export const compile = async (definition) => {
	const { schemaCode, schemaTree } = generate(definition)
	const { code } = await bundle(schemaCode)
	return { code, tree: 'export default ' + JSON.stringify(schemaTree, undefined, 4) }
}

const getSchemaIdArray = (schemaTree, ...keypath) => {
	const _getSchema = (...keys) => {
		let actualKeys = []
		let node = schemaTree
		while (keys.length) {
			const currentKey = keys.shift()
			actualKeys.push(currentKey)
			node = node?.[currentKey]
			if (!node) return null
			if (node.$sch) return actualKeys
			if (node.$ref) return _getSchema(...node.$ref, ...keys)
		}
		return null
	}
	return _getSchema(...keypath)
}

const getPath = opt => typeof opt === 'string'
	? opt.replace(/^#\//, '').split('/').map(s => decodeURIComponent(s))
	: opt

const formatPath = arr => `#/${arr.map(k => encodeURIComponent(k)).join('/')}`

/**
 * Given a schema tree and a full path, resolve references to the final schema identifier, as the
 * array of accessors, e.g. `['components','schemas','task']`.
 *
 * @param {Object} tree - The schema tree generated by the compiler.
 * @param {String|Array<String>} path - Either the reference string, e.g. `'#/components/schemas/task'` or the array path, e.g. `['components','schemas','task']`.
 * @return {Array<String>} - The accessor path in array form.
 */
export const getIdArray = ({ tree, path }) => getSchemaIdArray(tree, ...getPath(path))

/**
 * Given a schema tree and a full path, resolve references to the final schema identifier, as the
 * reference string, e.g. "#/components/schemas/task".
 *
 * @param {Object} tree - The schema tree generated by the compiler.
 * @param {String|Array<String>} path - Either the reference string, e.g. `'#/components/schemas/task'` or the array path, e.g. `['components','schemas','task']`.
 * @return {String} - The reference string.
 */
export const getIdString = ({ tree, path }) => formatPath(getSchemaIdArray(tree, ...getPath(path)))

/**
 * Given a schema tree, the map of schemas, and the full path, resolve references to the final
 * schema identifier and return that schemas validation function.
 *
 * @param {Object} tree - The schema tree generated by the compiler.
 * @param {Object} schemas - The schema map generated by the compiler.
 * @param {String|Array<String>} path - Either the reference string, e.g. `'#/components/schemas/task'` or the array path, e.g. `['components','schemas','task']`.
 * @return {Function|undefined} - The AJV validation function, or nothing.
 */
export const getSchema = ({ tree, schemas, path }) => schemas[formatPath(getSchemaIdArray(tree, ...getPath(path)))]
